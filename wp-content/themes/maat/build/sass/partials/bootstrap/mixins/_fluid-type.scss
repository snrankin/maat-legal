// ========================================================================= //
// Component: _fluid-type.scss
// Project: maat
// Created Date: 3-14-19
// Author: Sam Rankin (sam@maatlegal.com>)
// -----
// Last Modified: 4-9-19 at 10:51 am
// Modified By: Sam Rankin <sam@maatlegal.com>
// -----
// Copyright (c) 2019 Maat Legal
// -----
// HISTORY:
// Date      	By	Comments
// ----------	---	----------------------------------------------------------
// ========================================================================= //

@mixin poly-fluid-sizing($properties, $map) {
    // Get the number of provided breakpoints
    $length: length(
        map-keys($map)
    ); // Error if the number of breakpoints is < 2
    @if ($length < 2) {
        @error 'poly-fluid-sizing() $map requires at least values';
    }
    $map: map-sort($map);
    $keys: map-keys($map); // Minimum size
    @each $property in $properties {
        #{$property}: map-get($map, nth($keys, 1));
    }
    @for $i from 1 through ($length - 1) {
        @media (min-width: nth($keys, $i)) {
            @each $property in $properties {
                #{$property}: linear-interpolation(
                    (
                        nth($keys, $i): map-get($map, nth($keys, $i)),
                        nth($keys, ($i + 1)):
                        map-get($map, nth($keys, ($i + 1)))
                    )
                );
            }
        }
    } // Maxmimum size
    @media (min-width: nth($keys, $length)) {
        @each $property in $properties {
            #{$property}: map-get($map, nth($keys, $length));
        }
    }
}

@mixin fs($multiplier-sm: 0, $multiplier-lg: 0) {
    $font-lg: ms(
        $v: $multiplier-lg,
        $base: $font-size-px-lg,
        $ratio: $theme-ratio
    );
    $font-sm: ms(
        $v: $multiplier-sm,
        $base: $font-size-px-sm,
        $ratio: $theme-ratio
    );
    $sizes: (
        $sm: $font-sm,
        $xx: $font-lg
    );
    @include poly-fluid-sizing('font-size', $sizes);
}
